const vshader = `
varying vec3 v_position;

void main() {	
  v_position=position;
  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`;
const fshader = `
varying vec3 v_position;

float rect(vec2 pt,vec2 size,vec2 center){

  float inLeftRight=1.0-step(size.x,length((pt-center).x));
  float inUpDown=1.0-step(size.y,length((pt-center).y));
  float inSquare=min(inLeftRight,inUpDown);

  return inSquare;
}

void main (void)
{
  vec3 color = vec3(0.0);
  // color.r=clamp(v_position.x,0.0,1.0);
  // color.g=clamp(v_position.y,0.0,1.0);
  
  // color.r=step(0.0,v_position.x);
  // color.g=step(0.0,v_position.y);
  
  // color.r=smoothstep(0.0,0.3,v_position.x);
  // color.g=smoothstep(0.0,0.3,v_position.y);
  
  // float inCircle=1.0-step(0.5,length(v_position.xy));
  // color=vec3(1.0,1.0,0.0)*inCircle;
  
  float inRect1=rect(v_position.xy,vec2(0.3,0.3),vec2(-0.3,0.0));
  vec3 color1=vec3(1.0,1.0,0.0)*inRect1;
  
  float inRect2=rect(v_position.xy,vec2(0.4,0.4),vec2(0.3,0.0));
  vec3 color2=vec3(0.0,1.0,0.0)*inRect2;  
  
  color=color1+color2;
  
  gl_FragColor = vec4(color, 1.0); 
}
`;

const scene = new THREE.Scene();
const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 10);

const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const clock = new THREE.Clock();

const geometry = new THREE.PlaneGeometry(2, 2);
const uniforms = {
  u_color_a: { value: new THREE.Color(0xff0000) },
  u_color_b: { value: new THREE.Color(0x00ffff) },
  u_time: { value: 0.0 },
  u_mouse: { value: { x: 0.0, y: 0.0 } },
  u_resolution: { value: { x: 0, y: 0 } }
};

const material = new THREE.ShaderMaterial({
  uniforms: uniforms,
  vertexShader: vshader,
  fragmentShader: fshader
});

const plane = new THREE.Mesh(geometry, material);
scene.add(plane);

camera.position.z = 1;

onWindowResize();
if ("ontouchstart" in window) {
  document.addEventListener("touchmove", move);
} else {
  window.addEventListener("resize", onWindowResize, false);
  document.addEventListener("mousemove", move);
}

function move(evt) {
  uniforms.u_mouse.value.x = evt.touches ? evt.touches[0].clientX : evt.clientX;
  uniforms.u_mouse.value.y = evt.touches ? evt.touches[0].clientY : evt.clientY;
}

animate();

function onWindowResize(event) {
  const aspectRatio = window.innerWidth / window.innerHeight;
  let width, height;
  if (aspectRatio >= 1) {
    width = 1;
    height = (window.innerHeight / window.innerWidth) * width;
  } else {
    width = aspectRatio;
    height = 1;
  }
  camera.left = -width;
  camera.right = width;
  camera.top = height;
  camera.bottom = -height;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
  uniforms.u_resolution.value.x = window.innerWidth;
  uniforms.u_resolution.value.y = window.innerHeight;
}

function animate() {
  requestAnimationFrame(animate);
  uniforms.u_time.value += clock.getDelta();
  renderer.render(scene, camera);
}
