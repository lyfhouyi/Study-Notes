#iChannel0"file://RollingShowScales_pass_1A.frag"
#iChannel1"file://RollingShowScales_pass_1B.frag"

const float pi=3.141592653;
const float[503]xOffsetArray=float[503](0.,.00251,.00500,.00747,.00992,.01235,.01476,.01715,.01952,.02188,.02421,.02652,.02882,.03110,.03335,.03559,.03781,.04002,.04220,.04437,.04651,.04864,.05075,.05285,.05492,.05698,.05902,.06105,.06305,.06504,.06702,.06897,.07091,.07283,.07474,.07663,.07850,.08036,.08220,.08402,.08583,.08762,.08940,.09116,.09291,.09464,.09635,.09805,.09974,.10141,.10306,.10470,.10633,.10794,.10953,.11112,.11268,.11424,.11578,.11730,.11882,.12032,.12180,.12327,.12473,.12618,.12761,.12903,.13044,.13183,.13321,.13458,.13593,.13728,.13861,.13993,.14123,.14253,.14381,.14508,.14634,.14759,.14883,.15006,.15127,.15248,.15367,.15485,.15602,.15718,.15833,.15947,.16060,.16172,.16283,.16393,.16502,.16610,.16717,.16823,.16928,.17032,.17135,.17238,.17339,.17440,.17539,.17638,.17736,.17833,.17930,.18025,.18120,.18214,.18307,.18399,.18490,.18581,.18671,.18760,.18849,.18937,.19024,.19110,.19196,.19281,.19366,.19449,.19533,.19615,.19697,.19778,.19859,.19939,.20019,.20098,.20176,.20254,.20331,.20408,.20484,.20560,.20636,.20710,.20785,.20859,.20932,.21005,.21078,.21150,.21222,.21293,.21365,.21435,.21506,.21576,.21645,.21715,.21784,.21852,.21921,.21989,.22057,.22124,.22192,.22259,.22326,.22393,.22459,.22525,.22592,.22657,.22723,.22789,.22854,.22920,.22985,.23050,.23115,.23180,.23245,.23310,.23375,.23439,.23504,.23569,.23633,.23698,.23763,.23828,.23892,.23957,.24022,.24087,.24152,.24217,.24282,.24347,.24413,.24478,.24544,.24610,.24676,.24742,.24808,.24875,.24942,.25009,.25076,.25143,.25211,.25279,.25347,.25416,.25485,.25554,.25623,.25693,.25763,.25834,.25904,.25976,.26047,.26119,.26191,.26264,.26337,.26411,.26485,.26560,.26635,.26710,.26786,.26863,.26940,.27017,.27095,.27174,.27253,.27333,.27413,.27494,.27575,.27657,.27740,.27823,.27907,.27992,.28077,.28163,.28250,.28337,.28425,.28514,.28604,.28694,.28785,.28877,.28969,.29063,.29157,.29252,.29347,.29444,.29541,.29639,.29738,.29838,.29939,.30041,.30144,.30247,.30352,.30457,.30563,.30671,.30779,.30888,.30999,.31110,.31222,.31335,.31450,.31565,.31681,.31799,.31917,.32037,.32158,.32280,.32403,.32527,.32652,.32778,.32906,.33034,.33164,.33295,.33428,.33561,.33696,.33832,.33969,.34108,.34247,.34389,.34531,.34674,.34819,.34966,.35113,.35262,.35413,.35564,.35717,.35872,.36028,.36185,.36344,.36504,.36665,.36828,.36993,.37159,.37326,.37495,.37666,.37838,.38011,.38186,.38363,.38541,.38721,.38902,.39085,.39270,.39456,.39644,.39833,.40024,.40217,.40411,.40607,.40805,.41005,.41206,.41409,.41613,.41820,.42028,.42238,.42450,.42663,.42879,.43096,.43315,.43535,.43758,.43983,.44209,.44437,.44667,.44899,.45133,.45369,.45607,.45847,.46088,.46332,.46578,.46825,.47075,.47327,.47580,.47836,.48094,.48354,.48615,.48879,.49145,.49413,.49684,.49956,.50230,.50507,.50786,.51067,.51350,.51635,.51922,.52212,.52504,.52798,.53094,.53393,.53694,.53997,.54302,.54610,.54920,.55232,.55547,.55864,.56183,.56504,.56828,.57155,.57484,.57815,.58148,.58484,.58823,.59164,.59507,.59853,.60201,.60552,.60905,.61261,.61619,.61980,.62343,.62709,.63078,.63449,.63822,.64198,.64577,.64959,.65343,.65729,.66119,.66511,.66905,.67303,.67703,.68106,.68511,.68919,.69330,.69744,.70160,.70579,.71001,.71426,.71854,.72284,.72717,.73153,.73592,.74034,.74479,.74926,.75376,.75830,.76286,.76745,.77207,.77672,.78140,.78611,.79085,.79561,.80041,.80524,.81010,.81499,.81991,.82486,.82984,.83485,.83989,.84496,.85007,.85520,.86037,.86557,.87079,.87605,.88135,.88667,.89203,.89742,.90284,.90829,.91377,.91929,.92484,.93042,.93604,.94169,.94737,.95308,.95883,.96461,.97042,.97627,.98215,.98807,.99402,1.,1.00602,1.01207);
const float[503]yOffsetArray=float[503](0.,-.00280,-.00555,-.00825,-.01091,-.01352,-.01609,-.01861,-.02108,-.02351,-.02590,-.02824,-.03053,-.03279,-.03499,-.03715,-.03927,-.04135,-.04338,-.04536,-.04731,-.04921,-.05106,-.05288,-.05465,-.05638,-.05806,-.05971,-.06131,-.06287,-.06438,-.06586,-.06730,-.06869,-.07004,-.07135,-.07262,-.07385,-.07504,-.07619,-.07730,-.07837,-.07940,-.08038,-.08133,-.08224,-.08311,-.08395,-.08474,-.08549,-.08621,-.08689,-.08753,-.08813,-.08869,-.08922,-.08970,-.09016,-.09057,-.09095,-.09128,-.09159,-.09185,-.09208,-.09228,-.09243,-.09256,-.09264,-.09269,-.09271,-.09269,-.09263,-.09254,-.09241,-.09225,-.09206,-.09183,-.09157,-.09127,-.09094,-.09058,-.09018,-.08975,-.08928,-.08879,-.08826,-.08769,-.08710,-.08647,-.08581,-.08512,-.08440,-.08364,-.08285,-.08204,-.08119,-.08031,-.07940,-.07845,-.07748,-.07648,-.07545,-.07438,-.07329,-.07217,-.07102,-.06984,-.06863,-.06739,-.06612,-.06482,-.06350,-.06214,-.06076,-.05935,-.05791,-.05645,-.05495,-.05343,-.05188,-.05031,-.04871,-.04708,-.04542,-.04374,-.04203,-.04030,-.03854,-.03675,-.03494,-.03310,-.03124,-.02935,-.02744,-.02550,-.02354,-.02155,-.01954,-.01751,-.01545,-.01337,-.01126,-.00913,-.00698,-.00480,-.00260,-.00038,.00186,.00413,.00642,.00873,.01106,.01342,.01580,.01819,.02061,.02306,.02552,.02800,.03050,.03303,.03557,.03814,.04072,.04333,.04595,.04860,.05126,.05394,.05664,.05937,.06210,.06486,.06764,.07043,.07325,.07608,.07893,.08179,.08467,.08758,.09049,.09343,.09638,.09935,.10233,.10533,.10835,.11138,.11443,.11749,.12057,.12367,.12678,.12990,.13304,.13620,.13937,.14255,.14575,.14896,.15219,.15542,.15868,.16194,.16522,.16851,.17182,.17514,.17847,.18181,.18516,.18853,.19191,.19530,.19870,.20211,.20554,.20897,.21242,.21587,.21934,.22282,.22631,.22981,.23331,.23683,.24036,.24390,.24744,.25100,.25456,.25813,.26171,.26530,.26890,.27251,.27612,.27974,.28337,.28701,.29065,.29430,.29796,.30163,.30530,.30898,.31266,.31635,.32005,.32375,.32746,.33117,.33489,.33861,.34234,.34608,.34981,.35356,.35730,.36105,.36481,.36857,.37233,.37610,.37987,.38364,.38742,.39119,.39498,.39876,.40255,.40633,.41012,.41392,.41771,.42151,.42530,.42910,.43290,.43670,.44050,.44430,.44811,.45191,.45571,.45951,.46331,.46712,.47092,.47472,.47852,.48231,.48611,.48991,.49370,.49749,.50128,.50507,.50886,.51264,.51642,.52020,.52398,.52775,.53152,.53528,.53905,.54280,.54656,.55031,.55406,.55780,.56154,.56527,.56900,.57272,.57644,.58015,.58386,.58756,.59126,.59495,.59863,.60231,.60598,.60964,.61330,.61695,.62059,.62423,.62786,.63148,.63509,.63870,.64230,.64589,.64947,.65304,.65660,.66015,.66370,.66724,.67076,.67428,.67779,.68128,.68477,.68825,.69171,.69517,.69862,.70205,.70547,.70888,.71229,.71567,.71905,.72242,.72577,.72911,.73244,.73576,.73906,.74235,.74563,.74889,.75215,.75538,.75861,.76182,.76501,.76820,.77136,.77452,.77766,.78078,.78389,.78698,.79006,.79312,.79617,.79920,.80222,.80522,.80820,.81117,.81412,.81705,.81997,.82287,.82575,.82861,.83146,.83429,.83710,.83989,.84267,.84542,.84816,.85088,.85358,.85626,.85892,.86157,.86419,.86679,.86937,.87194,.87448,.87700,.87951,.88199,.88445,.88689,.88930,.89170,.89408,.89643,.89876,.90107,.90336,.90562,.90787,.91009,.91228,.91446,.91661,.91874,.92084,.92292,.92498,.92701,.92902,.93100,.93296,.93490,.93681,.93869,.94055,.94239,.94420,.94598,.94774,.94947,.95118,.95286,.95451,.95614,.95774,.95931,.96086,.96237,.96387,.96533,.96676,.96817,.96955,.97090,.97223,.97352,.97479,.97602,.97723,.97841,.97956,.98068,.98177,.98283,.98386,.98486,.98583,.98677,.98768,.98855,.98940,.99022,.99100,.99175,.99247,.99316,.99382,.99444,.99504,.99560,.99612,.99662,.99708,.99751,.99790,.99826,.99859,.99889,.99914,.99937,.99956,.99972,.99984,.99993,.99998,1.,.99998,.99993);
const float[101]xScaleShrinkArray=float[101](0.,.00894,.01777,.02648,.03508,.04359,.05199,.06030,.06852,.07665,.08470,.09267,.10057,.10840,.11616,.12386,.13151,.13910,.14664,.15414,.16160,.16902,.17641,.18378,.19112,.19844,.20574,.21304,.22033,.22761,.23490,.24219,.24950,.25682,.26415,.27151,.27890,.28632,.29377,.30126,.30880,.31638,.32402,.33171,.33947,.34729,.35518,.36314,.37117,.37929,.38750,.39580,.40419,.41267,.42126,.42996,.43877,.44770,.45674,.46591,.47520,.48463,.49419,.50389,.51374,.52374,.53389,.54419,.55466,.56530,.57610,.58708,.59823,.60957,.62110,.63281,.64472,.65683,.66915,.68167,.69440,.70735,.72052,.73391,.74753,.76139,.77548,.78981,.80439,.81922,.83430,.84964,.86524,.88111,.89725,.91366,.93036,.94733,.96459,.98215,1.00001);
const float[101]yScaleShrinkArray=float[101](0.,.01060,.02139,.03236,.04352,.05484,.06634,.07799,.08980,.10176,.11386,.12609,.13846,.15095,.16355,.17626,.18908,.20200,.21501,.22811,.24128,.25453,.26784,.28122,.29465,.30812,.32164,.33520,.34879,.36239,.37602,.38966,.40330,.41694,.43057,.44419,.45778,.47135,.48489,.49839,.51184,.52524,.53858,.55186,.56507,.57820,.59125,.60422,.61708,.62984,.64250,.65504,.66746,.67976,.69192,.70395,.71582,.72755,.73912,.75052,.76176,.77282,.78369,.79438,.80487,.81517,.82525,.83512,.84477,.85419,.86338,.87233,.88104,.88949,.89769,.90563,.91329,.92068,.92778,.93460,.94112,.94734,.95325,.95885,.96413,.96909,.97371,.97799,.98193,.98551,.98874,.99161,.99410,.99622,.99796,.99931,1.00026,1.00081,1.00096,1.00069,1.);
const float[101]xScaleAmplifyArray=float[101](0.,.01786,.03544,.05275,.06978,.08655,.10306,.11930,.13529,.15102,.16651,.18175,.19675,.21151,.22604,.24033,.25440,.26825,.28187,.29528,.30848,.32147,.33425,.34683,.35922,.37141,.38341,.39522,.40685,.41830,.42957,.44067,.45160,.46237,.47298,.48343,.49372,.50387,.51387,.52372,.53344,.54302,.55247,.56179,.57099,.58006,.58902,.59786,.60660,.61522,.62375,.63218,.64051,.64875,.65690,.66496,.67295,.68086,.68869,.69646,.70416,.71180,.71938,.72690,.73437,.74180,.74918,.75652,.76382,.77109,.77833,.78554,.79274,.79991,.80707,.81422,.82136,.82850,.83563,.84277,.84992,.85708,.86425,.87144,.87865,.88589,.89316,.90046,.90779,.91517,.92259,.93006,.93758,.94515,.95278,.96047,.96823,.97606,.98396,.99194,1.00001);
const float[101]yScaleAmplifyArray=float[101](0.,.01396,.02764,.04106,.05421,.06710,.07974,.09213,.10429,.11621,.12790,.13937,.15062,.16167,.17251,.18315,.19360,.20386,.21395,.22386,.23360,.24318,.25260,.26188,.27101,.28000,.28886,.29759,.30621,.31471,.32310,.33139,.33958,.34769,.35571,.36365,.37152,.37932,.38707,.39476,.40240,.41000,.41756,.42510,.43261,.44010,.44758,.45505,.46253,.47001,.47750,.48501,.49254,.50011,.50771,.51535,.52304,.53078,.53859,.54646,.55440,.56242,.57052,.57872,.58701,.59540,.60390,.61251,.62125,.63011,.63910,.64823,.65750,.66693,.67651,.68625,.69616,.70624,.71651,.72696,.73760,.74844,.75948,.77074,.78221,.79390,.80582,.81797,.83037,.84301,.85590,.86905,.88246,.89615,.91011,.92435,.93888,.95370,.96883,.98426,1.);
const float durationTime=3.;
const float scale_speed=5.;//缩放速度
const float roll_speed=5.;//滚动速度
const float scale_init_short=.925;//初始缩放比例_短边
const float scale_init_long=.980;//初始缩放比例_长边

//计算放大比例
float getScaleAmplify(float x){
    int left=0;
    int right=100;
    int mid;
    while(left+1!=right){
        mid=(left+right)/2;
        if(xScaleAmplifyArray[mid]==x)
        {
            return yScaleAmplifyArray[mid];
        }else if(xScaleAmplifyArray[mid]<x){
            left=mid;
        }else{
            right=mid;
        }
    }
    return yScaleAmplifyArray[left];
}

//计算缩小比例
float getScaleShrink(float x){
    int left=0;
    int right=100;
    int mid;
    while(left+1!=right){
        mid=(left+right)/2;
        if(xScaleShrinkArray[mid]==x)
        {
            return yScaleShrinkArray[mid];
        }else if(xScaleShrinkArray[mid]<x){
            left=mid;
        }else{
            right=mid;
        }
    }
    return yScaleShrinkArray[left];
}

//计算保持阶段偏移量
float getOffset(float x){
    int left=0;
    int right=502;
    int mid;
    while(left+1!=right){
        mid=(left+right)/2;
        if(xOffsetArray[mid]==x)
        {
            return yOffsetArray[mid];
        }else if(xOffsetArray[mid]<x){
            left=mid;
        }else{
            right=mid;
        }
    }
    return yOffsetArray[left];
}

float calcDirectionOffset(float time){
    float scale_duration=1./scale_speed;
    if(time<scale_duration){
        //缩小阶段
        return(.5-.5*getOffset(scale_speed*time))*(scale_speed*time);
    }else{
        //保持阶段和放大阶段
        return 0.;
    }
}

//二维缩放矩阵
mat2 scaleMatrix(float scaleX,float scaleY){
    return mat2(scaleX,0,0,scaleY);
}

//比例分屏滚动-三次 pass
void mainImage(out vec4 fragColor,in vec2 fragCoord)
{
    vec2 uv=fragCoord/iResolution.xy;
    float progress=fract(iTime/durationTime);
    float time=progress;
    float scale_duration=1./scale_speed;//缩小阶段持续时间
    float scalingRatioShort;
    float scalingRatioLong;
    if(time<scale_duration){
        //缩小阶段
        scalingRatioShort=getScaleShrink(scale_speed*time)+scale_init_short;
        scalingRatioLong=getScaleShrink(scale_speed*time)+scale_init_long;
    }else if(time<1.-scale_duration*.5){
        //保持阶段
        scalingRatioShort=1.+scale_init_short;
        scalingRatioLong=1.+scale_init_long;
    }else{
        //放大阶段
        scalingRatioShort=1.-getScaleAmplify(2.*scale_speed*(time-(1.-scale_duration*.5)))+scale_init_short;
        scalingRatioLong=1.-getScaleAmplify(2.*scale_speed*(time-(1.-scale_duration*.5)))+scale_init_long;
    }
    
    float midR=.5/scalingRatioShort;//中间半宽
    
    vec2 direction;//切分方向
    float mode_inner=(iResolution.x>iResolution.y)?0.:1.;
    
    float scalingRatioX;
    float scalingRatioY;
    if(mode_inner==1.){
        //竖向
        direction=vec2(0.,1.);
        scalingRatioX=scalingRatioShort;
        scalingRatioY=scalingRatioLong;
    }else{
        //横向
        direction=vec2(1.,0.);
        scalingRatioX=scalingRatioLong;
        scalingRatioY=scalingRatioShort;
    }
    
    vec2 directionNormal=vec2(-direction.y,direction.x);//垂直切分方向
    vec2 midEdge_1=vec2(.5)-midR*directionNormal;//中间边界
    vec2 midEdge_2=vec2(.5)+midR*directionNormal;//中间边界
    
    vec2 splitPoint_1=vec2(.5)-(1./scalingRatioShort)*directionNormal;//均分点1
    vec2 splitPoint_2=vec2(.5)+(1./scalingRatioShort)*directionNormal;//均分点2
    
    bool positionMid=false;
    vec2 st;
    if(cross(vec3(uv-midEdge_1,0.),vec3(direction,0.)).z>0.&&cross(vec3(uv-midEdge_2,0.),vec3(direction,0.)).z>0.){
        //两侧
        st=scaleMatrix(scalingRatioX,scalingRatioY)*(uv-vec2(.5))+vec2(.5)-time*roll_speed*direction;
    }else if(cross(vec3(uv-midEdge_1,0.),vec3(direction,0.)).z<0.&&cross(vec3(uv-midEdge_2,0.),vec3(direction,0.)).z<0.){
        //两侧
        st=scaleMatrix(scalingRatioX,scalingRatioY)*(uv-vec2(.5))+vec2(.5)+time*roll_speed*direction;
    }else{
        //中间
        positionMid=true;
        st=scaleMatrix(scalingRatioX,scalingRatioY)*(uv-vec2(.5))+vec2(.5);
        float center=calcDirectionOffset(time);
        vec2 offset=center*direction;
        st+=offset;
    }
    
    vec3 color;
    vec4 colorAll=texture2D(iChannel0,st);
    vec4 colorSingle=texture2D(iChannel1,st);
    
    if(positionMid){
        color=colorAll.rgb;
    }else{
        color=colorSingle.rgb;
    }
    
    fragColor=vec4(color,1.);
}